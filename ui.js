// ui.js
// Kh·ªüi t·∫°o c√°c DOM elements
function initializeUI() {
  remoteIdInput = document.getElementById("remoteId");
  statusDiv = document.getElementById("status");
  videoCallBtn = document.getElementById("videoCallBtn");
  audioCallBtn = document.getElementById("audioCallBtn");
  hangupBtn = document.getElementById("hangupBtn");
  
  // Call popup elements
  callPopup = document.getElementById("callPopup");
  callerNameDiv = document.getElementById("callerName");
  callTypeDiv = document.getElementById("callType");
  callTimeDiv = document.getElementById("callTime");
  acceptCallBtn = document.getElementById("acceptCallBtn");
  rejectCallBtn = document.getElementById("rejectCallBtn");
  
  // ƒêƒÉng k√Ω event listeners cho popup
  if (acceptCallBtn) {
    acceptCallBtn.addEventListener('click', acceptIncomingCall);
  }
  if (rejectCallBtn) {
    rejectCallBtn.addEventListener('click', rejectIncomingCall);
  }
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i hi·ªÉn th·ªã
function updateStatus(message, isError = false) {
  if (statusDiv) {
    statusDiv.textContent = message;
    statusDiv.className = `status ${isError ? "error" : "connected"}`;
  }
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i c√°c n√∫t b·∫•m
function updateButtonStates() {
  if (videoCallBtn) videoCallBtn.disabled = isInCall;
  if (audioCallBtn) audioCallBtn.disabled = isInCall;
  if (hangupBtn) hangupBtn.disabled = !isInCall;
}

// L·∫•y User ID t·ª´ ng∆∞·ªùi d√πng
function getUserId() {
  userId = prompt("Nh·∫≠p user ID c·ªßa b·∫°n:", "user1");
  if (!userId) {
    alert("C·∫ßn ph·∫£i c√≥ User ID ƒë·ªÉ ti·∫øp t·ª•c!");
    location.reload();
    return false;
  }
  
  document.getElementById("info").innerText = `B·∫°n ƒëang ƒëƒÉng nh·∫≠p v·ªõi ID: ${userId}`;
  return true;
}

// Hi·ªÉn th·ªã video local
function setLocalVideo(stream) {
  const localVideo = document.getElementById("localVideo");
  if (localVideo) {
    localVideo.srcObject = stream;
  }
}

// Hi·ªÉn th·ªã video remote
function setRemoteVideo(stream) {
  const remoteVideo = document.getElementById("remoteVideo");
  if (remoteVideo) {
    remoteVideo.srcObject = stream;
  }
}

// X√≥a video streams
function clearVideos() {
  const localVideo = document.getElementById("localVideo");
  const remoteVideo = document.getElementById("remoteVideo");
  
  if (localVideo) localVideo.srcObject = null;
  if (remoteVideo) remoteVideo.srcObject = null;
}

// Hi·ªÉn th·ªã popup cu·ªôc g·ªçi ƒë·∫øn
function showCallPopup(fromUserId, callType, offerData = null) {
    console.log("Showing call popup");
  if (callPopup) {
    // C·∫≠p nh·∫≠t th√¥ng tin cu·ªôc g·ªçi
    if (callerNameDiv) callerNameDiv.textContent = fromUserId;
    if (callTypeDiv) callTypeDiv.textContent = `Cu·ªôc g·ªçi ${callType}`;
    if (callTimeDiv) callTimeDiv.textContent = new Date().toLocaleTimeString();
    console.log("offerData received in showCallPopup:", offerData);
    // L∆∞u th√¥ng tin cu·ªôc g·ªçi v√† offer (n·∫øu c√≥)
    pendingCall = { fromUserId, callType };
    if (offerData) {
      pendingOffer = { fromId: fromUserId, offer: offerData };
    }
    console.log("Pending call data set:", pendingOffer);
    // Hi·ªÉn th·ªã popup
    callPopup.style.display = 'flex';
    
    // Ph√°t √¢m thanh chu√¥ng (n·∫øu c√≥)
    playRingtone();
  }
}

// ·∫®n popup cu·ªôc g·ªçi
function hideCallPopup() {
  if (callPopup) {
    callPopup.style.display = 'none';
    pendingCall = null;
    pendingOffer = null;
    // Kh√¥ng clear pendingIceCandidates ·ªü ƒë√¢y v√¨ c√≥ th·ªÉ c·∫ßn d√πng
    stopRingtone();
  }
}

// Ch·∫•p nh·∫≠n cu·ªôc g·ªçi ƒë·∫øn
async function acceptIncomingCall() {
  if (!pendingCall) return;
  
  console.log("Accepting call from:", pendingCall.fromUserId);
  
  // N·∫øu c√≥ offer ƒëang ch·ªù, x·ª≠ l√Ω offer
  if (pendingOffer) {
    console.log("Processing pending offer...");
    await processAcceptedOffer(pendingOffer.fromId, pendingOffer.offer);
  } else {
    console.log("No pending offer, setting up media only...");
    // Fallback: ch·ªâ setup media n·∫øu kh√¥ng c√≥ offer
    await handleIncomingCall(pendingCall.fromUserId, pendingCall.callType);
  }

  // Sau khi x·ª≠ l√Ω xong th√¨ m·ªõi ·∫©n popup v√† x√≥a d·ªØ li·ªáu
  hideCallPopup();
}

// T·ª´ ch·ªëi cu·ªôc g·ªçi ƒë·∫øn
async function rejectIncomingCall() {
  if (!pendingCall) return;
  
  const fromUserId = pendingCall.fromUserId;
  cleanupCall();
  updateStatus(`ƒê√£ t·ª´ ch·ªëi cu·ªôc g·ªçi t·ª´ ${fromUserId}`);
  hideCallPopup();
  // Clear pending data khi t·ª´ ch·ªëi
  pendingIceCandidates = [];
}

// Ph√°t √¢m thanh chu√¥ng (c√≥ th·ªÉ t√πy ch·ªânh)
function playRingtone() {
  // C√≥ th·ªÉ th√™m audio element ƒë·ªÉ ph√°t √¢m thanh chu√¥ng
  console.log("üîî Playing ringtone...");
}

// D·ª´ng √¢m thanh chu√¥ng
function stopRingtone() {
  console.log("üîá Stopping ringtone...");
}